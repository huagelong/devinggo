(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{380:function(t,n,e){"use strict";e.r(n);var r=e(14),s=Object(r.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"创建一个定时任务步聚如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建一个定时任务步聚如下"}},[t._v("#")]),t._v(" 创建一个定时任务步聚如下：")]),t._v(" "),n("ol",[n("li",[t._v("创建定义cron")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 代码见 modules\\system\\worker\\cron\\test_cron.go 新文件建在同一目录\npackage cron\n\nimport (\n\t"devinggo/modules/system/pkg/worker/cron"\n\tglob2 "devinggo/modules/system/pkg/worker/glob"\n\t"devinggo/modules/system/pkg/worker/task"\n\t"devinggo/modules/system/worker/consts"\n\t"context"\n\t"github.com/gogf/gf/v2/encoding/gjson"\n\t"github.com/gogf/gf/v2/frame/g"\n\t"github.com/hibiken/asynq"\n)\n\n# 初始化一个cron\nvar testCron = &ctestCron{\n\tType:        consts.TEST_CRON, # 任务名称 ，重要\n\tDescription: "This is a test cron", # 任务描述\n\tPayload:     &glob2.Payload{},\n}\n\ntype ctestCron struct {\n\tType        string\n\tDescription string\n\tPayload     *glob2.Payload\n}\n\ntype TestCronData struct { // 传输的数据格式,重要\n\tName string `json:"name"`\n}\n\nfunc init() {\n\tcron.Register(testCron)\n}\n\nfunc (s *ctestCron) GetType() string {\n\treturn s.Type\n}\n\nfunc (s *ctestCron) GetCronTask() *asynq.Task {\n\treturn task.GetTask(s)\n}\n\nfunc (s *ctestCron) GetPayload() *glob2.Payload {\n\treturn s.Payload\n}\n\nfunc (s *ctestCron) GetDescription() string {\n\treturn s.Description\n}\n\nfunc (s *ctestCron) SetParams(ctx context.Context, params *gjson.Json) {\n\tif g.IsEmpty(params) {\n\t\treturn\n\t}\n\tdata := new(TestCronData)\n\tif err := params.Scan(data); err != nil {\n\t\tglob2.WithWorkLog().Errorf(ctx, "[%s] cron SetParams failed:%v", s.Type, err)\n\t\treturn\n\t}\n\ts.Payload.Data = data\n}\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("绑定执行定时任务的worker")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('# 见 modules\\system\\worker\\server\\test_cron_worker.go 新文件建在同一目录\n\npackage server\n\nimport (\n\tglob2 "devinggo/modules/system/pkg/worker/glob"\n\t"devinggo/modules/system/pkg/worker/server"\n\t"devinggo/modules/system/worker/consts"\n\t"devinggo/modules/system/worker/cron"\n\t"context"\n\t"github.com/hibiken/asynq"\n)\n\nvar testCronWorker = &ctestCronWorker{\n\tType: consts.TEST_CRON,   #任务名称，同上面定义相同，重要\n}\n\ntype ctestCronWorker struct {\n\tType string\n}\n\nfunc init() {\n\tserver.Register(testCronWorker)\n}\n\nfunc (s *ctestCronWorker) GetType() string {\n\treturn s.Type\n}\n\n// Execute 执行任务\nfunc (s *ctestCronWorker) Execute(ctx context.Context, t *asynq.Task) (err error) {\n\tdata, err := glob2.GetParamters[cron.TestCronData](ctx, t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tglob2.WithWorkLog().Infof(ctx, `jsonData:%+v`, data)\n    // todo 执行代码，在这里添加\n\treturn\n}\n\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("重启服务，登录后台，定时任务管理页面添加 "),n("code",[t._v("job任务")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);