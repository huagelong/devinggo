(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{378:function(t,n,e){"use strict";e.r(n);var s=e(14),r=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"创建一个消息队列步聚如下"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建一个消息队列步聚如下"}},[t._v("#")]),t._v(" 创建一个消息队列步聚如下：")]),t._v(" "),n("ol",[n("li",[t._v("定义task")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('//见 modules\\system\\worker\\task\\test_task\\test_task.go 新文件建在同一目录\npackage test_task\n\nimport (\n\t"context"\n\t"devinggo/modules/system/pkg/worker/glob"\n\t"devinggo/modules/system/pkg/worker/task"\n\t"devinggo/modules/system/worker/consts"\n\t"github.com/hibiken/asynq"\n)\n\ntype ctestTask struct {\n\tType    string\n\tPayload *glob.Payload\n}\n\ntype TestTaskData struct { // 传输的数据格式,重要\n\tName string `json:"name"`\n}\n\nfunc New() *ctestTask {\n\treturn &ctestTask{\n\t\tType: consts.TEST_TASK, // 任务名称，重要\n\t\tPayload: &glob.Payload{\n\t\t\t//Time:     asynq.ProcessIn(gconv.Duration("1s")),\n\t\t\t/*\n\t\t\t\tasynq.Retention  执行后保留一段时间删除,唯一\n\t\t\t\tasynq.ProcessIn(time.Second * 5)  等待一段时间后执行 延迟5s执行\n\t\t\t\tasynq.ProcessAt(time.Now().Add(time.Second*10)) 指定时间执行，当前时间+10s执行\n\t\t\t*/\n\t\t\tTime:   asynq.ProcessIn(0),\n\t\t\tTaskID: consts.TEST_TASK, // 任务id，可写死，也可以随机，写死后任务同一时间只会执行一条\n\t\t},\n\t}\n}\n\nfunc (s *ctestTask) GetType() string {\n\treturn s.Type\n}\n\nfunc (s *ctestTask) Send(ctx context.Context, data interface{}) error {\n\ts.Payload.Data = data\n\treturn task.NewTask(ctx, s)\n}\n\nfunc (s *ctestTask) GetPayload() *glob.Payload {\n\treturn s.Payload\n}\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("绑定执行任务的worker")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('// 见 modules\\system\\worker\\server\\test_worker.go 新文件建在同一目录\n\npackage server\n\nimport (\n\tglob2 "devinggo/modules/system/pkg/worker/glob"\n\t"devinggo/modules/system/pkg/worker/server"\n\t"devinggo/modules/system/worker/consts"\n\t"devinggo/modules/system/worker/cron"\n\t"context"\n\t"github.com/hibiken/asynq"\n)\n\nvar testWorker = &cTestWorker{\n\tType: consts.TEST_TASK,  #任务名称，同上面定义相同，重要\n}\n\ntype cTestWorker struct {\n\tType string\n}\n\nfunc init() {\n\tserver.Register(testWorker)\n}\n\nfunc (s *cTestWorker) GetType() string {\n\treturn s.Type\n}\n\n// Execute 执行任务\nfunc (s *cTestWorker) Execute(ctx context.Context, t *asynq.Task) (err error) {\n\tdata, err := glob2.GetParamters[cron.TestCronData](ctx, t)\n\tif err != nil {\n\t\treturn err\n\t}\n\tglob2.WithWorkLog().Infof(ctx, `jsonData:%+v`, data)\n    // todo 执行代码，在这里添加\n\treturn\n}\n\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("生产一条消息")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('testTask := New()\ntestTask.Send(context.Background(), &TestTaskData{Name: "helloworld"})\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);